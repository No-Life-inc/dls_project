apiVersion: v1
data:
  create-db.sql: "USE master;\nGO\n\nCREATE DATABASE writedb;\nGO\n\nUSE writedb;\nGO\n\n-- Create Users table\nCREATE TABLE users(\n    user_id INT IDENTITY PRIMARY KEY,\n    user_guid UNIQUEIDENTIFIER,\n    created_at DATETIME\n);\nGO\n\n-- Create User Info table\nCREATE TABLE user_info (\n    user_info_id INT IDENTITY PRIMARY KEY,\n    first_name NVARCHAR(255),\n    last_name NVARCHAR(255),\n    img_url NVARCHAR(255),\n    email NVARCHAR(255),\n    created_at DATETIME,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\nGO\n\n-- Create User Deleted table\nCREATE TABLE user_deleted(\n    created_at DATETIME,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n)\nGO\n\n-- Create Story table with foreign key constraint\nCREATE TABLE stories (\n    story_id INT IDENTITY PRIMARY KEY,\n    story_guid UNIQUEIDENTIFIER,\n    created_at DATETIME,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id)\n);\nGO\n\n-- Create Story info table\nCREATE TABLE story_info(\n    story_info_id INT IDENTITY PRIMARY KEY,\n    title NVARCHAR(255),\n    body_text NVARCHAR(MAX),\n    img_url NVARCHAR(255),\n    created_at DATETIME,\n    story_id INT,\n    FOREIGN KEY (story_id) REFERENCES Stories(story_id) ON DELETE CASCADE\n)\nGO\n\n-- Create Comment table\nCREATE TABLE comments(\n    comment_id INT IDENTITY PRIMARY KEY,\n    comment_guid UNIQUEIDENTIFIER,\n    created_at DATETIME,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    story_id INT,\n    FOREIGN KEY (story_id) REFERENCES Stories(story_id) ON DELETE CASCADE\n)\nGO\n\n-- Create Comment Info table\nCREATE TABLE comment_info(\n    comment_info_id INT IDENTITY PRIMARY KEY,\n    body_text NVARCHAR(MAX),\n    created_at DATETIME,\n    comment_id INT,\n    FOREIGN KEY (comment_id) REFERENCES Comments(comment_id) ON DELETE CASCADE\n)\nGO\n\n-- Create Recation Type table\nCREATE TABLE reaction_type(\n    reaction_type_id INT IDENTITY PRIMARY KEY,\n    reaction_type_name NVARCHAR(255),\n    reaction_type_img NVARCHAR(255)\n)\nGO\n\n-- Create Recation table\nCREATE TABLE reactions(\n    reaction_id INT IDENTITY PRIMARY KEY,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    story_id INT,\n    FOREIGN KEY (story_id) REFERENCES Stories(story_id),\n    reaction_type_id INT,\n    FOREIGN KEY (reaction_type_id) REFERENCES Reaction_type(reaction_type_id)\n)\nGO\n\n-- Create Story Reaction table\nCREATE TABLE story_reaction(\n    story_reaction_id INT IDENTITY PRIMARY KEY,\n    story_id INT,\n    FOREIGN KEY (story_id) REFERENCES Stories(story_id),\n    reaction_id INT,\n    FOREIGN KEY (reaction_id) REFERENCES Reactions(reaction_id)\n)\nGO\n\n-- Create Comment Reaction table\nCREATE TABLE comment_reaction(\n    comment_reaction_id INT IDENTITY PRIMARY KEY,\n    comment_id INT,\n    FOREIGN KEY (comment_id) REFERENCES Comments(comment_id),\n    reaction_id INT,\n    FOREIGN KEY (reaction_id) REFERENCES Reactions(reaction_id)\n)\nGO\n\n-- Friends table (Join table for the many-to-many relationship between users and their friends)\nCREATE TABLE friends (\n    friendship_id INT IDENTITY PRIMARY KEY,\n    created_at DATETIME,\n    user_id INT,\n    friend_id INT,\n    FOREIGN KEY (user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (friend_id) REFERENCES Users(user_id),\n    UNIQUE(user_id, friend_id) -- Ensures uniqueness of friendships\n);\nGO\n\n-- Blocked table\nCREATE TABLE blocked (\n    blocked_id INT IDENTITY PRIMARY KEY,\n    created_at DATETIME,\n    blocking_user_id INT,\n    blocked_user_id INT,\n    FOREIGN KEY (blocking_user_id) REFERENCES Users(user_id),\n    FOREIGN KEY (blocked_user_id) REFERENCES Users(user_id),\n    UNIQUE(blocking_user_id, blocked_user_id) -- Ensures uniqueness of blocked relationships\n);\nGO\n\n-- Insert dummy data into Users table\nINSERT INTO users (user_guid, created_at)\nVALUES \n    (NEWID(), GETDATE()),\n    (NEWID(), GETDATE()),\n    (NEWID(), GETDATE());\n\n-- Insert dummy data into UserInfo table\nINSERT INTO user_info (first_name, last_name, img_url, email, created_at, user_id)\nVALUES \n    ('John', 'Doe', 'john_doe.jpg', 'john@example.com', GETDATE(), 1),\n    ('Jane', 'Doe', 'jane_doe.jpg', 'jane@example.com', GETDATE(), 2),\n    ('Alice', 'Smith', 'alice_smith.jpg', 'alice@example.com', GETDATE(), 3);\n\n-- Insert dummy data into UserDeleted table\nINSERT INTO user_deleted (created_at, user_id)\nVALUES \n    (GETDATE(), 1),\n    (GETDATE(), 2);\n\n-- Insert dummy data into Stories table\nINSERT INTO stories (story_guid, created_at, user_id)\nVALUES \n    (NEWID(), GETDATE(), 1),\n    (NEWID(), GETDATE(), 2),\n    (NEWID(), GETDATE(), 3);\n\n-- Insert dummy data into StoryInfo table\nINSERT INTO story_info (title, body_text, img_url, created_at, story_id)\nVALUES \n    ('Story 1', 'Lorem ipsum dolor sit amet.', 'story1.jpg', GETDATE(), 1),\n    ('Story 2', 'Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.', 'story2.jpg', GETDATE(), 2),\n    ('Story 3', 'Nulla facilisi. Sed euismod porta erat id commodo.', 'story3.jpg', GETDATE(), 3);\n\n-- Insert dummy data into Comments table\nINSERT INTO comments (comment_guid, created_at, user_id, story_id)\nVALUES \n    (NEWID(), GETDATE(), 1, 1),\n    (NEWID(), GETDATE(), 2, 2),\n    (NEWID(), GETDATE(), 3, 3);\n\n-- Insert dummy data into CommentInfo table\nINSERT INTO comment_info (body_text, created_at, comment_id)\nVALUES \n    ('Comment 1', GETDATE(), 1),\n    ('Comment 2', GETDATE(), 2),\n    ('Comment 3', GETDATE(), 3);\n\n-- Insert dummy data into ReactionType table\nINSERT INTO reaction_type (reaction_type_name, reaction_type_img)\nVALUES \n    ('Like', 'like.jpg'),\n    ('Love', 'love.jpg'),\n    ('Haha', 'haha.jpg');\n\n-- Insert dummy data into Reactions table\nINSERT INTO reactions (user_id, story_id, reaction_type_id)\nVALUES \n    (1, 1, 1),\n    (2, 2, 2),\n    (3, 3, 3);\n\n-- Insert dummy data into StoryReaction table\nINSERT INTO story_reaction (story_id, reaction_id)\nVALUES \n    (1, 1),\n    (2, 2),\n    (3, 3);\n\n-- Insert dummy data into CommentReaction table\nINSERT INTO comment_reaction (comment_id, reaction_id)\nVALUES \n    (1, 1),\n    (2, 2),\n    (3, 3);\n\n-- Insert dummy data into Blocked table\nINSERT INTO Blocked (created_at, blocking_user_id, blocked_user_id)\nVALUES \n    (GETDATE(), 1, 2),  -- User 1 blocks User 2\n    (GETDATE(), 2, 3),  -- User 2 blocks User 3\n    (GETDATE(), 3, 1);  -- User 3 blocks User 1\n\n-- Insert dummy data into Friends table\nINSERT INTO Friends (created_at, user_id, friend_id)\nVALUES \n    (GETDATE(), 1, 2),  -- User 1 is friends with User 2\n    (GETDATE(), 1, 3),  -- User 1 is friends with User 3\n    (GETDATE(), 2, 3),  -- User 2 is friends with User 3\n    (GETDATE(), 3, 1);  -- User 3 is friends with User 1\n\n"
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: write-db
  name: write-db-cm0
